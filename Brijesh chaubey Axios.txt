 What is axios ? How is it different from fetch ?
1-Defination and examples
Axios is an HTTP client library that allows you to make requests to a given endpoint,Axios is a lightweight HTTP client based on the $http service within Angular. js v1. x and is similar to the native JavaScript Fetch API. Axios is promise-based, which gives you the ability to take advantage of JavaScript's async and await for more readable asynchronous code.
const getPostsData = () => {
  axios
  .get("https://jsonplaceholder.typicode.com/posts")
  .then(data => console.log(data.data))
  .catch(error => console.log(error));
  };
 getPostsData();
The Fetch API is a modern interface that allows you to make HTTP requests to servers from web browsers. If you have worked with XMLHttpRequest  object, the Fetch API can perform all the tasks as the XHR object does. In addition, the Fetch API is much simpler and cleaner.
const getPostsData = () => {
  fetch(‘https://jsonplaceholder.typicode.com/posts’)
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));
  }
}
 getPostsData();
2-Package needed for support
Axios —  of Axios  you need to install it  manually because it is a stand-alone third-party package.
To install it we use npm install axios,yarn add axios

Fetch — To get support of Fetch you dont need to install it. because it is in-build into most of the browser.
3 Simultaneous requests
Axios-To make multiple simultaneous requests, Axios provides the axios.all() method. Simply pass an array of requests to this method, then use axios.spread() to assign the properties of the response array to separate variables:
axios.all([
  axios.get('https://api.github.com/users/iliakan'), 
  axios.get('https://api.github.com/users/taylorotwell')
])
.then(axios.spread((obj1, obj2) => {
  console.log(obj1.data.login + ' has ' + obj1.data.public_repos + ' public repos on GitHub');
  console.log(obj2.data.login + ' has ' + obj2.data.public_repos + ' public repos on GitHub');
}));
Fetch-To achieve the same result by Fetch we use the built-in Promise.all() method. Pass all fetch requests as an array to Promise.all(). Next, handle the response by using an async function, like this:
Promise.all([
  fetch('https://api.github.com/users/iliakan'),
  fetch('https://api.github.com/users/taylorotwell')
])
.then(async([res1, res2]) => {
  const a = await res1.json();
  const b = await res2.json();
  console.log(a.login + ' has ' + a.public_repos + ' public repos on GitHub');
  console.log(b.login + ' has ' + b.public_repos + ' public repos on GitHub');
})
.catch(error => {
  console.log(error);
});
4. CSRF Protection support:-
Axios —It have in-build support of CSRF (Cross site request forgery) to prevent cross-site request.

Fetch — It doesn’t support CSRF
5. Request Data:-
Axios — request data contain object, you can directly sent JSON Object in request data.
axios
  const url = 'https://jsonplaceholder.typicode.com/posts'
const data = {
  a: 10,
  b: 20,
};
axios
  .post(url, data, {
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json;charset=UTF-8",
    },
  })
  .then(({data}) => {
    console.log(data);
});

Fetch — request data should stringify
fetch(url, {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify(jsonObject),
})
.then((response) => response.json())

.then((json) => {

})
.catch(() => {

});
6. Request Interceptor support:-
Axios — It have in-build feature of intercept HTTP Request.

Fetch — It doesn’t provide a way to intercept http requests.

7. Upload/Download Request Progress:-
Axios —It  support developers to provide data transmission progress so developers can show loading indicator while user communicating with server.

Fetch — Doesn’t support Upload/Download progress.

8. Browser Support:-
Axios —   it has  wide browser support.

Fetch — only support limited browsers & version , like Chrome 42+, Firefox 39+, Edge 14+, Safari 10.1.

