//normal function
function greeet(){

<text>hello<text/>

}
greet();
// arrow function
const greet=()=>{
  console .lo
}
greet();
//event
const add =()=>{
 result= a+b

add(1,2)
<button onclick="add()">sum</button>
//string methods 
length---
a=ddnffidjfijfij
s=a.length;
slice---
s=a.slice(1,6);
substring----
s=a.substring(1,6);
substr---
s=a.substr(1,7);
//array  method
a=[1,2,3,4,5]
join---
s=a.join("*")
pop--
s=a.pop()
push--
s=a.push(8);
slice--
s= a.slice(2,5);
splice--
s=a.splice(1,0,3);
//Array itteration
a=[1,2,3,4,5,6]
foreach--
s=a.foreach(myfunction);
map--
s=a.map(myfunction);
//self invoking function
(function add(){
 a+b})(1,2);
//call ,apply, bind
let name={
firstname:brijesh
lastname:chaubey
}
let printfullname=function(hometown,state){
console.log(this.fisrtname+" "+this.lastname+"from"+hometown+","+state
}
printFullname.call(name,"dehradun",utterpradesh");
printFullname.apply(name,["dehradun",utterpradesh"]);
let printmyname=printFullname.bind(name,"dehradun",utterpradesh");
printmyname();
//callback
function sum(a,b){
return a+b;
}
function calc(fx,a,b){
return fx(a,b);
}
console.log(calc(diff,4,5));
//promise
let p = new promise((resolve,reject)=>{
let a=1+1
if(a==2){
resolve("sucess")
}
else{
reject("failed")
}
})
p.then((message)=>{
console.log('Tis is in then'+message)
}).catch(message)=>{
console.log('Tis is in then'+message)
})
//async await
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

async function myFunction() {return "Hello";}

myFunction().then(
  function(value) {myDisplayer(value);},
  function(error) {myDisplayer(error);}
);
//closure
function x(){
var a=7;
function y(){
console.log(a);
}
y();
}
x();
//////REACT
//class component
class Car extends React.Component {
  render() {
    return <h2>Hi, I am a Car!</h2>;
  }
}
//function component
function Car() {
  return <h2>Hi, I am a Car!</h2>;
}
//props
const my element=<Car brand="ford"/>

function Car(props) {
  return <h2>I am a { props.brand }!</h2>;
}
//form
function MyForm() {
  return (
    <form>
      <label>Enter your name:
        <input type="text" />
      </label>
    </form>
  )
}
ReactDOM.render(<MyForm />, document.getElementById('root'));
//useState hook
 const [color, setColor] = useState("");
//useEffect
useEffect(() => {
   function fun() {  
  
  
               alert ("This is an alert dialog box");  
            }  

}[]);
// useContext 
function Component1() {
  const [user, setUser] = useState("Jesse Hall");

  return (
    <UserContext.Provider value={user}>
      <h1>{`Hello ${user}!`}</h1>
      <Component2 user={user} />
    </UserContext.Provider>
  );
}
function Component5() {
  const user = useContext(UserContext);

  return (
    <>
      <h1>Component 5</h1>
      <h2>{`Hello ${user} again!`}</h2>
    </>
  );
}
//useRef
 const count = useRef(0);
 useEffect(() => {
    count.current = count.current + 1;
  });
////REdux
//Action type
export const AUTH_LOG_OUT = 'AUTH_LOG_OUT';
//Action
export const getUserProfile = userDataResponse => ({
  type: GET_USER_DATA,
  userDataResponse ,
});
//Reducer
const initialState = {
  
  authData: null,
  getUserData:[],
 
export const authReducer = (state = initialState, action) => {
  switch (action.type) {
    case AUTH_LOG_IN:
      return {
        ...state,
        authData: action.authDataResponse,
      };
    case AUTH_LOG_OUT:
      return {
        ...state,
        authData: action.authDataSignOutRes,
      };
//Store
import {createStore} from 'redux';
import {authReducer} from './Reducer';
export const store = createStore(authReducer);